;declarations

extern printf
extern scanf
extern atof

global input_array

segment .data                 ;Place initialized data here
  floatformat db "%lf", 0


segment .bss      ;Declare pointers to un-initialized space in this segment.
  
segment .text
input_array:

;backup GPRs
push rbp
mov rbp, rsp
push rbx
push rcx
push rdx
push rdi
push rsi
push r8
push r9
push r10
push r11
push r12
push r13
push r14
push r15
pushf

;store array address and array max size in non-volatile registers to use when inputting values into array as well as ensuring the number of values stays within the maximum
 ; mov array address to a register
 ; create a max value


;set r13 to zero in order to use as a counter for the float point numbers for both array length and to ensure the number of values is within the limits
 ; create index var/register


; if number of values in the array is still less than size of array jump here to allow user to input floats
loop:
; check if end conditions are met


;make room on the stack then obtain user's floating point number input to put into the array


;store the floating point number into its own address, the counters index in the array


;increase the counter for array size/number of values inputted so far, then jump back to top of the loop



;exit and return to manager
exit:

;Restore the GPRs
popf
pop r15
pop r14
pop r13
pop r12
pop r11
pop r10
pop r9
pop r8
pop rsi
pop rdi
pop rdx
pop rcx
pop rbx
pop rbp   ;Restore rbp to the base of the activation record of the caller program
ret
;End of the function input_array ====================================================================

